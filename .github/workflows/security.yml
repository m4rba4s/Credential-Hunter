name: Security Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security checks weekly
    - cron: '0 0 * * 0'

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Run cargo audit
      run: cargo audit --json > audit-results.json
    
    - name: Upload audit results
      uses: actions/upload-artifact@v3
      with:
        name: security-audit-results
        path: audit-results.json

  dependency-check:
    name: Dependency License Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install cargo-deny
      run: cargo install cargo-deny
    
    - name: Check licenses
      run: cargo deny check licenses
    
    - name: Check advisories
      run: cargo deny check advisories
    
    - name: Check bans
      run: cargo deny check bans

  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy
    
    - name: Run Clippy with security lints
      run: |
        cargo clippy --all-targets --all-features -- \
          -W clippy::all \
          -W clippy::pedantic \
          -W clippy::nursery \
          -W clippy::cargo \
          -D warnings
    
    - name: Install cargo-geiger
      run: cargo install cargo-geiger
    
    - name: Run unsafe code analysis
      run: cargo geiger --output-format Json > unsafe-analysis.json
    
    - name: Upload unsafe analysis
      uses: actions/upload-artifact@v3
      with:
        name: unsafe-code-analysis
        path: unsafe-analysis.json

  fuzz-testing:
    name: Fuzz Testing
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install Rust nightly
      uses: dtolnay/rust-toolchain@nightly
    
    - name: Install cargo-fuzz
      run: cargo install cargo-fuzz
    
    - name: Initialize fuzz targets
      run: |
        if [ ! -d "fuzz" ]; then
          cargo fuzz init
        fi
    
    - name: List fuzz targets
      id: fuzz-targets
      run: cargo fuzz list
    
    - name: Run short fuzz tests
      run: |
        timeout 300s cargo fuzz run fuzz_pattern_matching -- -max_total_time=240 || true
        timeout 300s cargo fuzz run fuzz_memory_scanning -- -max_total_time=240 || true
      continue-on-error: true

  code-ql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: rust
        queries: security-and-quality
    
    - name: Build project
      run: cargo build --workspace
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  semgrep:
    name: Semgrep Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/rust
        publishToken: ${{ secrets.SEMGREP_PUBLISH_TOKEN }}
        publishDeployment: ${{ github.repository }}
        generateSarif: "1"
    
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: semgrep.sarif
      if: always()