name: 🚀 Enterprise Credential Hunter CI

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # 🧪 Quality Checks
  check:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ⚡ Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: 📦 Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: 🔧 Check formatting
      run: cargo fmt --all -- --check
      continue-on-error: true

    - name: 📋 Clippy lints
      run: cargo clippy --all-targets --all-features -- -W clippy::all
      continue-on-error: true

    - name: 🏗️ Build check
      run: cargo check --all-features --workspace

  # 🧪 Tests
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ⚡ Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: 📦 Cache cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}

    - name: 🧪 Run tests
      run: cargo test --workspace --all-features --lib
      continue-on-error: true

    - name: 📊 Run benchmarks (no-run)
      run: cargo bench --no-run --workspace
      continue-on-error: true

  # 🏗️ Build Matrix
  build:
    name: 🏗️ Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ⚡ Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: 📦 Cache cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}

    - name: 🏗️ Build release
      run: cargo build --release --workspace

    - name: 🧪 Test CLI (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        ./target/release/ech --version || echo "Version test failed"
        ./target/release/ech --help || echo "Help test failed"
      continue-on-error: true
      shell: bash

    - name: 🧪 Test CLI (Windows)
      if: runner.os == 'Windows'
      run: |
        ./target/release/ech.exe --version || echo "Version test failed"
        ./target/release/ech.exe --help || echo "Help test failed"
      continue-on-error: true
      shell: bash

  # 🛡️ Security Audit
  security:
    name: 🛡️ Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ⚡ Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: 🛡️ Install cargo-audit
      run: cargo install cargo-audit
      continue-on-error: true

    - name: 🔍 Security audit
      run: cargo audit --ignore RUSTSEC-2020-0071 --ignore RUSTSEC-2023-0018
      continue-on-error: true

    - name: 🚫 Cargo deny
      uses: EmbarkStudios/cargo-deny-action@v1
      continue-on-error: true

  # 📦 Release Build (on tags)
  release:
    name: 📦 Release Build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [check, test, build, security]
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ⚡ Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: 🏗️ Build release
      run: cargo build --release --workspace

    - name: 📦 Create release artifacts
      run: |
        mkdir artifacts
        cp target/release/ech artifacts/
        cp README.md LICENSE artifacts/
        tar -czf ech-${{ github.ref_name }}-linux-x86_64.tar.gz -C artifacts .

    - name: 🚀 Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: ech-*.tar.gz
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 🎯 Demo Test
  demo:
    name: 🎯 Live Demo Test
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ⚡ Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: 🏗️ Build
      run: cargo build --release

    - name: 📝 Create test secrets
      run: |
        cat > test_demo.txt << 'EOF'
        # Demo secrets for CI test
        AWS_ACCESS_KEY=AKIAIOSFODNN7EXAMPLE
        password=demo_secret_123
        api_key=sk_live_abcdef123456789012345
        -----BEGIN RSA PRIVATE KEY-----
        MIIEpAIBAAKCAQEA...
        -----END RSA PRIVATE KEY-----
        EOF

    - name: 🔍 Run demo scan
      run: |
        echo "🚨 LIVE DEMO: Credential Detection"
        ./target/release/ech scan --target test_demo.txt --high-confidence
        echo ""
        echo "✅ Demo completed successfully!"

    - name: 📊 Performance test
      run: |
        echo "⚡ Performance Test"
        time ./target/release/ech scan --target . --max-files 100